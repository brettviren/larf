* Stepping code

What does it mean to step?

- a spatial domain defined on some discrete space (from a previous result)
- a potential defined on this domain (from a previous result)
- a velocity field derived from this potential (method+params)
- a stepping procedure (method+params)
- a function evaluated on each step (method+params+previous result)

** velocity field

The real velocity field is $\mu*\vec{E}_{drift}$ with $\mu$ a function
of the mag of the Efield.  Efield comes from the potential computed in
the raster step.  Also want to do testing with ad-hoc velocity fields.
So, need to specify a method to produce the v-field.  That method
needs a prior rastered potential result.

** do something

The stepper takes a callable to consume steps.  This callable should
be configurable and its parameters provided by configuration.


* Arrays

- Numpy arrays are used as intermediate data types.
- There are many of them.  
- Keeping track of them in files becomes unwieldy quickly
- Want to track provenance
- Want standardization

Stick them all in a DB.

* Stepping

** Induced Current

The current in electrode $k$ is

$i_k = q \times (\vec{E}_{weight,k} \cdot \vec{v})$

with

$\vec{v} = \mu \times \vec{E}_{drift}$

And $\mu$ as given in [[http://arxiv.org/abs/1508.07059][arXiv:1508.07059]] or interactively at the [[http://lar.bnl.gov/properties/#e-trans][BNL LAr properties web site]].
The $\mu$ parameter is a function of the magnitude of $\vec{E}_{drift}$ and temperature.
Some care of the units are needed.  The mobility formula takes $E$ in units of kV/cm and returns $\mu$ in units of $cm^2/s/V$.

The instantaneous current in electrode $k$ at time $t$ due to charge $q$ at position $\vec{r}$ is then purely a function of the fields:

$i_{k,q}(t) = q \times \mu(E_{drift}) \times (\vec{E}_{weight,k} \cdot \vec{E}_{drift})$

Where the E-fields implicitly functions of $\vec{r}(t)$ of the drifting charge.
The total instantaneous current on electrode $k$ is then

$i_k(t) = \sum_q i_{k,q}(t)$

** Trajectories

*Absent diffusion* a charge produced at a given starting point will always take the same trajectory through the a static drift field and thus produce a fixed contribution to the induced current on any given electrode.  

* Problems Encountered

** Gaussian quadrature

BEM++ [[https://en.wikipedia.org/wiki/Gaussian_quadrature][Gaussian quadrature]] rule to do the boundary integrals.  The
precision of this is governed by how many points on any pair of
triangles are evaluated.  The [[http://www.bempp.org/quadrature.html][table in the BEM++ docs]] gives default
values and how to change them.  Of particular note is that the number
of evaluations can be set at three length scales

The effect of having the number of evaluations too low can be seen by
looking at the solved potential near by a boundary.  It manifests as
square boundaries of different sizes where the solution has small but
clear discontinuities.

To show this problem, a simple capacitor geometry is made:

[[./capacitor-mini-special.png]]

It has +/- 5000V applied.  Using the nominal number of evaluations
gives the potential:

[[./capacitor-mini-drift-special-default-gaussian.pdf]]

Quadrupling the near, medium and far orders gives a potential:

[[./capacitor-mini-drift-special.pdf]]

Some discontinuities can still be seen but they are clearly reduced.
The mesh has 4240 elements and 2124 vertices.  
The calculation time increased by factor of approximately 5.

