#+TITLE: Configuration

* Overview

The =larf= tool relies on a configuration file to specify parameters that are expected to be reused between calls to the =larf= command.  The format of this file follows the "INI" schema which consists of named sections of key/value pairs.  Some simple interpretation semantics are then overlayed.  The default configuration file is in the current working directory and named [[./larf.cfg][larf.cfg]].  A different file can be specified with the =-c= option

#+BEGIN_SRC sh
  $ larf -c myconfig.cfg ...
#+END_SRC

* Section categories and names

Each section name is two words giving the section type or category and an instance name.
For example this section is in the =mesh= category and named =parallel=:

#+BEGIN_EXAMPLE
  [mesh parallel]
  # ... key/value pairs
#+END_EXAMPLE

* Configuration items

There are two types of key/value configuration items.  

- directives :: reserved keys used to direct the configuration
- parameters :: key/value pairs taken at face-value

The directives depend on the section category as described:

** Functional categories

The following categories are "functional":

- mesh :: describe how to construct a surface mesh
- boundary :: describe a boundary potential
- raster :: describe how to raster the solution over some space

These categories are called "functional" as they are meant to describe a function to call and its parameters.  The "function" is described as a Python "dotted" path consisting of one or more modules and an object.  The parameter set is built from two sources of key/values pairs.  First, a =param= key can be specified and all key/value pairs in the associated =params= section will be used.  This set will be updated with any other key/value pairs given in the original configuration section.  An example makes this clear:

#+BEGIN_EXAMPLE
  [mesh parallel]
  methods = larf.wires.parallel
  params = small dune
  lcar = 2.5*mm                   

  [params small]
  nwires = 20

  [params dune]
  pitch = 5*mm
  gap = 5*mm
  radius = 150*um
#+END_EXAMPLE

In the example a mesh named "parallel" is to be build from the =parallel()= method in the =larf.wires= module.  The parameters given to that function consist of the contents of the "=dune=" and "=small=" configuration sections of type =params=.  The parameter set from these to sections is finally updated with the lone =lcar= parameter (characteristic mesh length) which is given directly in the =mesh parallel= section.

Note the use of units for distance quantities.  The =larf= supports a limited set of units including length and time.  

** The =boundary= category

This =boundary= category drives solving the full boundary conditions on the mesh.  These solutions consist of the provided potentials (Dirichlet) and the calculated vector gradients (Neumann).  This category also determines if a drift field (=larf.potentials.drift=) or a Shockley-Ramo field (=larf.potentials.weighting=) is to be calculated.  For a drift field a =domain_voltage_map= must be provided.  It is list of ordered pairs giving =(domain, voltage)= or =((min_domain,max_domain), voltage)=.  The =domain= is the domain indices which are specified in the mesh.  For a weighting field a single =domain= index must be specified which will set it to 1V and all others to 0V.  Typically this =domain= index is given on the command line:

#+BEGIN_EXAMPLE
$ larf -P domain=11 boundary [...]
#+END_EXAMPLE

** The =raster= category

This category drives evaluating the potential at points in the volume.  The method determines the nature of spanning the volume.  The usual method =larf.raster.linear= will produce a rectilinear grid uniform in each dimension.   It requires a =linspaces= to be provided which is a list of three 3-tuples holding =(min, max, number)=.  The min/max values give the extent of the domain in that dimension and the number gives the number of points.

** Parameter category

As mostly already described, the =params= configuration section category just holds key/value pairs evaluated at face value.  These can be useful if different =larf= command require sharing the same parameters.  For example, if the same parameters describing wires are used in multiple =mesh= sections they can be put into a shared =params= section.


* Command Line Parameters

You may also specify general parameters to =larf= on the command line which may override those specified in the configuration file.

#+BEGIN_SRC sh
  $ larf -P foo=bar,baz=quax -P domain=11 [...]
#+END_SRC

