#+TITLE: Running =larf=

* Generalities

To know how to run LARF one must understand how it's composed.
Here gives names to and relationships between the components of LARF.

** Calculations

LARF functionality is organized into a set of dependent /categories of
calculation/.  Each category is identified with a major step in
solving some overall problem.  For example, most problems start with a
"mesh" calculation and follow with a calculation of the boundary
conditions.

A category of calculation is accessed by a =larf= sub-command.  For
example a "mesh" calculation is performed with the =larf mesh=
command.  The category name is also used to identify the configuration
file section providing input parameters.  More information on
configuration is in the [[./config.org]] section.

** Method prototypes

Each calculation category has an associated method prototype and
calling protocol which determines how actual Python code is called to
perform that particular calculation.  A calculation may involve
repeated calls to one or more Python methods.

The prototype to which they adhere determines what information must be
provided and what is returned.  Prototypes take zero or more /results/
(described below), a number of prototype-specific keyword arguments
and a number of method-specific keyword arguments.  Methods are
expected to return a category-specific value.

FIXME: for now =cli.py= handles too much interface mush involved in
forming a =Result= object.  Push this into the =larf= modules and
regularize the calling protocol better.

** Results

Each calculation produces a single /result/.  A result has the following attributes

- id :: a unique numerical identifier for the result
- parents :: the identifiers of all results used as input to produce this one
- type :: identifies the calculation category ("mesh", "boundary", "raster", etc)
- name :: a human readable label, potentially not unique. 
- timestamp :: when the result was produced
- params :: a dictionary of input parameters given to the calculation
- arrays :: a collection of /arrays/ (described below) which comprise the main data of the result

Uniqueness is in the context of the associated =results= table in a LARF store (Sqlite3 DB file).

** Params

All non-result information that is given to a calculation is captured
as a set of named parameters.  Along with the input results it should
be possible to reproduce any result.  The schema any parameter set
must follow depends on the calculation category and the exact set of
methods employed.  Where different methods expect different
parameters, they must tolerate being given a union of all calculation
parameters.  They must ignore any that are not expected, allow for
some to be shared and avoid conflicting ones.

** Arrays

Last but not least, each result has a number of arrays.  Arrays have the following attributes:

- id :: a unique numerical identifier for the array
- name :: a human readable label, potentially not unique. 
- type :: a label indicating how the array should be interpreted
- data :: a Numpy array

Uniqueness is in the context of the associated =arrays= table in a LARF store (Sqlite3 DB file).

* Example

Enough generalities and on to some actual calculations.  The provided
[[../larf.cfg][larf.cfg]] file and [[../tests/test_capacitor.sh][this test script]] calculates various things for a
simple parallel plane capacitor.  The calculations are associated as described in this graph:

[[./captest.svg]]

** The database file

Before starting, decide on a database file.  Either start fresh with no default database file:

#+BEGIN_EXAMPLE
  $ rm lart.db
#+END_EXAMPLE

Or, explicitly give some database file as an argument in the subsequent commands:

#+BEGIN_EXAMPLE
  $ larf -s mylarfproject.db [...]
#+END_EXAMPLE

The test script elects to use this latter approach, but we will not include the =-s= option in the following examples to keep them brief.  Some logging output is also suppressed.

** Making the mesh

Now, run through the calculations.  First make a *mesh* and save the result to the name =capacitor=.  Because we do not explicitly name the =[mesh]= configuration section the command assumes we want one by the same name and =[mesh capacitor]= is used.  This pattern is repeated in many of the commands to follow.

#+BEGIN_EXAMPLE
  $ larf mesh capacitor
  mesh result id 1
#+END_EXAMPLE

To visually check the mesh you can export it into a number of formats.  For example, export for [[http://gmsh.info][GMSH]]:

#+BEGIN_EXAMPLE
  $ larf export -t mesh capacitor-mesh.msh
  $ gmsh capacitor-mesh.msh
#+END_EXAMPLE

[[./capacitor-mesh-gmsh.svg]]

Or, export to VTK for [[http://docs.enthought.com/mayavi/mayavi/][mayavi2]] or [[http://www.paraview.org/][paraview]]:

#+BEGIN_EXAMPLE
  $ larf export -r 1 capacitor-mesh.vtk
  $ mayavi2 capacitor-mesh.vtk
  # or
  $ mayavi2 capacitor-mesh.vtk
#+END_EXAMPLE

For mayavai2, do "Add Module" \to "Surface".

[[./capacitor-mesh-mayavi2.png]]

For paraview, click on the eyeball.

[[./capacitor-mesh-paraview.png]]

** Drift field and stepping

Next calculate the *boundary* conditions and save the result to the name =capdrift=.  Again, the assumption is that we want a =[boundary]= section of the same name.  As input we use the the mesh calculated in the previous step.  No mesh is identified and so the most recent result of type =mesh= is used as input.

#+BEGIN_EXAMPLE
  $ larf boundary capdrift
  drift domain voltage map: {1: -5000.0, 2: 5000.0}
  space DoFs: const=920 linear=464
  Evaluating integral equation
          in 0.3 sec
  domains given: 2, set: 2760, tried: 2760
          found:1:1380, 2:1380
          missed:
  Solving boundary integral equation
          in 0.2 sec
  boundary result id 2
#+END_EXAMPLE

Note, this command implicitly fund the needed input mesh as it was the most recent one produced.  We could have listed the mesh explicitly by result ID or by name like:

#+BEGIN_EXAMPLE
  $ larf boundary -m 1 capdrift
  # or
  $ larf boundary -m capacitor capdrift
#+END_EXAMPLE

Next we evaluate the boundary solution throughout the volume on a *raster* of points.  Here we use an explicitly named =[raster capacitor]= section different than the result name.  We do this because we will need a number of "raster" results and it is convenient to differentiate them by their names.  Names can be degenerate as the ID numbers are always unique.

#+BEGIN_EXAMPLE
  $ larf raster -r capacitor capdrift
  raster result id 3
#+END_EXAMPLE

Next is to calculate a drift *velocity* based on the raster potential from the previous step.  As before, this calculation knows it needs a "raster" result and will take the most recent one found in the store.  We both specify both configuration section and result name as just "capacitor" as there is only one velocity in this problem.

#+BEGIN_EXAMPLE
  $ larf velocity velocity capacitor
  velocity result id 4
#+END_EXAMPLE

Once we have a velocity we can do *stepping*

#+BEGIN_EXAMPLE
  larf step capacitor
  steps result id 5
#+END_EXAMPLE

The most recent velocity result is picked up as input.  Again, there is only one stepping in this problem so we can name both its configuration section and this result with a generic "capacitor".

** Instantaneous electrode current

The Shockley-Ramo method singles out one electrode at a time in order to calculate the instantaneous *current* in each due to charge moving through the electrostatic field (calculated above).  With this simple problem we have two electrodes.  We must calculate first the S-R weighting field and then the currents for each.  The weighting fields are calculated in a similar way as the electrostatic field.  First a *boundary* calculation and then a *raster* calculation.  These are each combined with a *stepping* to produce their *current*.  Through these calculations
we pick unique names based on the domain number of the electrodes and take care to explicitly name input results.  The following suppresses some output in order to better show the calling patterns.

#+BEGIN_EXAMPLE
  $ larf -P domain=1 boundary -b weighting capbound1
  boundary result id 6

  $ larf -P domain=2 boundary -b weighting capbound2
  boundary result id 7

  $ larf raster -b capbound1 -r capacitor capweight1
  raster result id 8

  $ larf raster -b capbound2 -r capacitor capweight2
  raster result id 9

  $ larf current -c capacitor -s capacitor -w capweight1 capcur1
  current result id 10

  $ larf current -c capacitor -s capacitor -w capweight2 capcur2
  current result id 11
#+END_EXAMPLE

** Summary listing

At this point a summary of all results can be shown:

#+BEGIN_EXAMPLE
  $ larf list
  1    ()         mesh        capacitor           2016-07-08 09:39:41.837673
  2    (1)        boundary    capdrift            2016-07-08 09:39:42.594153
  3    (2,1)      raster      capdrift            2016-07-08 09:40:15.099561
  4    (3)        velocity    capacitor           2016-07-08 09:40:15.570969
  5    (4)        stepping    capacitor           2016-07-08 09:40:15.922463
  6    (1)        boundary    capbound1           2016-07-08 09:40:16.659825
  7    (1)        boundary    capbound2           2016-07-08 09:40:17.411794
  8    (6,1)      raster      capweight1          2016-07-08 09:40:50.502844
  9    (7,1)      raster      capweight2          2016-07-08 09:41:23.182059
  10   (5,8)      current     capcur1             2016-07-08 09:41:23.541461
  11   (5,9)      current     capcur2             2016-07-08 09:41:23.828367
#+END_EXAMPLE

Details about the arrays (=-a=) and parameters (=-p=) associated with each result can be shown and one can filter what is shown by result type (=-t=) and name (=-n=).  
