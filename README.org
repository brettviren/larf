* Get started

** Install prerequisites for generating meshes

#+BEGIN_SRC sh
  $ sudo apt-get install gmsh
  $ virtualenv --system-site-packages venv
  $ source venv/bin/activate
  $ pip install pygmsh meshio
#+END_SRC

** Test mesh generation

#+BEGIN_SRC sh
  $ python cyl.py 
  $ gmsh cyl.msh 
#+END_SRC

** Install BEM++

See [[http://www.bempp.org/installation.html][BEM++ install instructions]].  Eg:

#+BEGIN_SRC sh
  $ wget http://www.bempp.org/files/python-bempp_wily_3.0.3_amd64.deb
  $ sudo dpkg -i python-bempp_wily_3.0.3_amd64.deb
  $ sudo apt-get -f install
#+END_SRC

If =dpkg= command will fail the subsequent =apt-get= will install missing dependencies and complete the BEM++ installation.

** Install lartpc-field itself

#+BEGIN_SRC sh
  $ git clone ...
  $ cd lartpc-field
  $ python setup.py install
  # or 
  $ python setup.py develop
  $ larf 
#+END_SRC

* Running

The calculation is run through the =larf= command line tool.  The calculation requires steps:

1. Generate a mesh for electrode surfaces
2. Identify one electrode (for weighting field calculation) 
3. Solve the Laplace equation for boundary conditions
4. Evaluate the solution at points in space

** Mesh generation

This package generates and uses [[http://gmsh.info/doc/texinfo/gmsh.html#MSH-ASCII-file-format][MSH ASCII format]].  To properly book
keep which elements of the mesh describe a particular electrode some
care is needed in producing mesh files.  The =larf= command assures
that the correct MSH /physical ID/ is set.

#+BEGIN_SRC sh
  $ larf wiremsh -o wires.msh
  $ gmsh wires.msh
#+END_SRC

** Identify electrodes

Wires are named by their plane letter (one of =u=, =v= or =w=) and zero-based index.

** Calculate

The solution and its evaluation are currently done in one command.

#+BEGIN_SRC sh
  $ larf weighting -w u1 -o weight-u1 wires.msh 
  $ display weight-u1.png
  $ ls weight-u1*
#+END_SRC

The content of the PNG file is also saved as =numpy= arrays in the =*.npz= file.
